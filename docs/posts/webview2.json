{"Title":"简单介绍微软官方谷歌内核.NET浏览器控件WebView2","Time":1607788800000,"Content":"<span class='winformComment'>'简单介绍微软官方谷歌内核.NET浏览器控件WebView2<br>'本文发布于 2020年 12月 13日<br>'本网站所有文章，除非另外注明，否则皆采用 <a href='https://creativecommons.org/licenses/by-nc-nd/4.0/deed.zh' target='_blank'>CC BY-NC-SA 4.0</a> 进行许可。 </span><br><h1>来源</h1>\n<p>从不知道多老开始，VB6那时候就有一个浏览器控件，WebBrower，反正用的IE内核贼垃圾。<br />\nWin10推出之后，微软的edge浏览器是用的edgeHTML这个内核，当时推出了一个浏览器控件叫 WebView 。<br />\n这个控件体验也很差，早期还只支持 UWP 不支持 WIN32 。<br />\n自从微软把edge浏览器变成了谷歌浏览器内核（Chromium），一切都开始明朗起来了。<br />\n推出了新的浏览器控件 WebView2 ，接下来我们就讲一讲怎么玩耍这个东西。</p>\n<h1>官方文档</h1>\n<p>如果你不想看我BB，直接去下面看官方文档。<br />\nhttps://docs.microsoft.com/zh-cn/microsoft-edge/webview2/</p>\n<h1>安装</h1>\n<p>首先，你必须在你的电脑上安装 WebView2 Runtime。可以说你不安装新版edge只要安装这个runtime就行了，这是为了防止做出的操作对系统环境使用的 edge 造成破坏或干扰。<br />\n在软件的用户的电脑上也必须安装这个runtime才能正常工作。<br />\nhttps://developer.microsoft.com/en-us/microsoft-edge/webview2/<br />\n微软特地给你提供了离线安装版，在线安装版和固定不更新版本。<br />\n在线安装版，就是 Evergreen Bootstrapper。<br />\n离线安装版，就是 Evergreen Standalone Installer。<br />\nEvergreen 指的是常青的，比如常青藤（意义不明）。<br />\n这两个都只能安装到 C:\\Program Files (x86)\\Microsoft\\EdgeWebView\\Application 里面，而且好像会自动更新（具体不清楚，官方文档里写的很含糊）。<br />\n还有一个解压即用版，就是 Fixed Version ，其实指的是固定版本，这个是不会自动更新的。<br />\n如果你要使用这个 Fixed Version ，最好好好阅读一下这个 https://docs.microsoft.com/zh-cn/microsoft-edge/webview2/concepts/distribution</p>\n<p>安装好runtime之后，到你的 .NET 项目里面安装这个 NUGET 包。<br />\n<img src=\"https://s3.ax1x.com/2020/12/13/rew5K1.png\" alt=\"\" /><br />\n注意只能在以下平台运行：<br />\n<img src=\"https://s3.ax1x.com/2020/12/13/rewIDx.md.png\" alt=\"\" /></p>\n<h1>入门，链接跳转</h1>\n<p>下面我全部的内容使用的都是 .NET Framework 4.8 ， Windows Forms， VB .NET 。<br />\n不同的版本会有小的差异。<br />\n你应该可以在这个控件工具箱列表里找到这个控件，放置出来就可以了。<br />\n<img src=\"https://s3.ax1x.com/2020/12/13/rewHUO.png\" alt=\"\" /><br />\n尽量不要操作右边的属性栏，把要初始化的代码都写在窗体的Load里面就好。<br />\n下面我把这个控件实例命名为 edge 。<br />\n在窗体的 Load 事件里面写上：</p>\n<pre><code class=\"language-vb\">edge.Source = New Uri(&quot;https://www.baidu.com&quot;)\n</code></pre>\n<p>Source 属性可以让控件跳到指定的链接。可以是<code>http://localhost</code>，也可以是 <code>file:///C:/xxx.html</code> 格式的本地文件链接，还可以是 <code>edge://version</code> ，不过好像没有那个小恐龙游戏了。<br />\n运行程序，看见窗口内的浏览器控件自动跳到了百度，说明咱们成功了。<br />\n<img src=\"https://s3.ax1x.com/2020/12/13/re00iD.png\" alt=\"\" /><br />\n还有，别让用户手贱把这些进程给关了。<br />\n<img src=\"https://s3.ax1x.com/2020/12/13/reBNlj.png\" alt=\"\" /></p>\n<h1>设置运行环境，保存用户数据</h1>\n<p>在不设置运行环境的情况下，默认的用户数据是保存在webview2 runtime里面的，和用户平时的edge是隔离的，但是会在所有webview2程序里共享。<br />\n如果你登陆了B站，并且选择了记住信息，那么下次打开程序还是会自动登陆B站。<br />\n要避免共享，可以设置用户数据保存的文件夹，和其他人的独立开来。<br />\n首先需要引用（如果是wpf的自己改）：</p>\n<pre><code class=\"language-vb\">Imports Microsoft.Web.WebView2.Core\nImports Microsoft.Web.WebView2.WinForms\n</code></pre>\n<p>在窗体的 Load 事件里面写上：</p>\n<pre><code class=\"language-vb\">Dim ev = CoreWebView2Environment.CreateAsync(, AppContext.BaseDirectory)\nedge.EnsureCoreWebView2Async(ev.Result)\nedge.Source = New Uri(&quot;https://baidu.com&quot;)\n</code></pre>\n<p>尽管这上面两个函数都是异步的，后面我会讲异步的关系。<br />\n<code>CoreWebView2Environment.CreateAsync</code>这个函数有三个可选参数，留空都是默认，第一个是webview2 runtime的路径，就是有msedgewebview2.exe的那个文件夹。第二个是用户数据文件夹。第三个是一些可选设置，可以添加自定义进程启动设置。<br />\n用户数据文件夹的那个路径下，webview2会创建一个文件夹叫做<code>EBWebView</code>，然后一切用户数据都是在里面的。</p>\n<h1>正确设置 Core</h1>\n<p><code>CoreWebView2</code> 是核心，用控件的只读属性 <code>CoreWebView2</code> 来获得，上面说到的 <code>EnsureCoreWebView2Async</code> 函数就是修改这个核心的设置。<br />\n但是问题来了，这个异常奇葩，属性 <code>CoreWebView2</code>  获得的核心默认是 nothing (null) 的，你必须先使用 <code>EnsureCoreWebView2Async</code> 函数。<br />\n但是这个函数居然是个异步函数，就很刺激了。<br />\n经过我的测试，如果你直接 <code>Task.Wait()</code> 这个玩意会永远卡死下去。<br />\n正确的办法是这样：</p>\n<pre><code class=\"language-vb\">Private Async Sub Form1_Load(sender As Object, e As EventArgs) Handles Me.Load\n    Dim ev = CoreWebView2Environment.CreateAsync(, AppContext.BaseDirectory)\n    Await ev\n    Dim t As Task = edge.EnsureCoreWebView2Async(ev.Result)\n    Await t\n    Debug.WriteLine(edge.CoreWebView2.BrowserProcessId)\n    edge.Source = New Uri(&quot;https://baidu.com&quot;)\nEnd Sub\n</code></pre>\n<p>能不能不设置核心就用这个控件呢？<br />\n可以是可以，很多功能就少了，垃圾微软什么奇葩设计啊，core有的功能不继承到具体实现里面。</p>\n<h1>阻止新窗口弹出</h1>\n<p>在实际使用中，这玩意会动不动打开新窗口，然后新窗口就完全不受程序控制了。所以我们可以给 core 新增一个事件，让新窗口的链接转移到本窗口里来。<br />\n把下面的代码放在上面的 <code>Await t</code> 之后，就是要保证已经 <code>EnsureCoreWebView2Async</code> 完成了。</p>\n<pre><code class=\"language-vb\">Dim core = edge.CoreWebView2\nAddHandler core.NewWindowRequested, Sub(ss As Object, ee As CoreWebView2NewWindowRequestedEventArgs)\n                                        ee.Handled = True\n                                        edge.Source = New Uri(ee.Uri)\n                                    End Sub\n</code></pre>\n<p>这样就可以了。</p>\n<h1>阻止用户使用浏览器自带功能</h1>\n<p>默认情况下，在网页右键是可以和普通浏览器一样打开菜单的，还居然可以打开一个F12窗口，真心NB。<br />\n如果你不想让用户这么做的话，可以在 <code>core.Settings</code> 里面修改：</p>\n<pre><code class=\"language-vb\">core.Settings.AreDefaultContextMenusEnabled = False\ncore.Settings.AreDevToolsEnabled = False\ncore.Settings.IsZoomControlEnabled = False\n</code></pre>\n<p>第三个就是不允许用户通过 ctrl 加滚轮修改网页大小，还有一些设置自己探索一下，我就懒得说了。</p>\n<h1>在网页上运行 javascript</h1>\n<p>在窗口上新增一个按钮，然后添加下列代码：<br />\n必须使用 Async 和 Await 异步操作，<code>Task.Wait()</code> 或 <code>Task.Result</code> 都会一直卡死，无法继续！</p>\n<pre><code class=\"language-vb\">Private Async Sub Button1_Click(sender As Object, e As EventArgs) Handles Button1.Click\n    Dim t = edge.ExecuteScriptAsync(&quot;confirm('你是帅哥嘛?')&quot;)\n    Await t\n    Debug.WriteLine(t.Result)\nEnd Sub\n</code></pre>\n<p><img src=\"https://s3.ax1x.com/2020/12/13/reyw2F.png\" alt=\"\" /><br />\n效果就是这样，然后debug那边应该会显示一个 true 或者 false ，返回的一定是字符串，如果啥都没有就是<code>&quot;null&quot;</code>了。</p>\n<h1>网页传递信息到程序</h1>\n<p>这里说的是信息指的是 WebMessage ，使用方法如下：<br />\n准备一个本地网页，随便写点什么，然后一定要在 <code>&lt;script&gt;</code> 里面写上下面这段javascript并引发与运行：</p>\n<pre><code class=\"language-javascript\">var m = {}\nm.Age = 15\nm.Name = 'John'\nwindow.chrome.webview.postMessage(m)\n</code></pre>\n<p>然后在程序代码里准备好 core，按下面这么操作，最好写在窗体Load里面。那个链接就写自己的本地html的文件链接就好。</p>\n<pre><code class=\"language-vb\">Dim core = edge.CoreWebView2\ncore.Settings.IsWebMessageEnabled = True\nedge.Source = New Uri(&quot;file:///D:/test.html&quot;)\n</code></pre>\n<p>接下来给 webview2 控件新建一个事件：</p>\n<pre><code class=\"language-vb\">Private Sub edge_WebMessageReceived(sender As Object, e As CoreWebView2WebMessageReceivedEventArgs) Handles edge.WebMessageReceived\n    Debug.WriteLine(e.WebMessageAsJson)\nEnd Sub\n</code></pre>\n<p>这样，在加载这个html，运行到那段js的时候，就会引发这个WebMessageReceived事件，传过来的是对象的json字符串。</p>\n<h1>抓包</h1>\n<p>这个功能很有意思啊，可以拿来获取 httponly 的 cookie 和一些奇怪的 CSRF 之类的。<br />\n首先要给core添加一条过滤规则，指定哪些链接和内容是我们要抓包的。<br />\n如果想抓全部，就写这个：</p>\n<pre><code class=\"language-vb\">core.AddWebResourceRequestedFilter(&quot;*&quot;, CoreWebView2WebResourceContext.All)\n</code></pre>\n<p>接下来需要添加一个捕获事件，就像这样：</p>\n<pre><code class=\"language-vb\">AddHandler core.WebResourceRequested, Sub(ss As Object, ee As CoreWebView2WebResourceRequestedEventArgs)\n                                            If ee.Request.Headers.Contains(&quot;Cookie&quot;) Then\n                                                Debug.WriteLine(ee.Request.Headers.GetHeader(&quot;Cookie&quot;))\n                                            End If\n                                            '最好先检测一下是不是Headers.Contains\n                                            '否则 GetHeader 遇到不存在的头会扔出一个错误。\n                                        End Sub\n</code></pre>\n<p>在API里，<code>CoreWebView2WebResourceRequestedEventArgs</code>是有一个属性叫<code>Response</code>，不过没有合适的办法来获取它的值，访问就是nothing(null)，如果在task里或者thread里去访问这个值，直接就throw了一个COM不支持的错误出来。<br />\n<a href=\"https://github.com/MicrosoftEdge/WebView2Feedback/issues/275#issuecomment-652911352\">github有神仙</a>通过修改官方dll实现了获取这个<code>Response</code>，想看可以自己看看。</p>\n<h1>回复我</h1>\n<ul>\n<li><a href=\"https://t.bilibili.com/468203769441965711?tab=2\">b站</a></li>\n<li><a href=\"https://www.0xaa55.com/thread-26227-1-1.html\">A5的论坛 技术宅的结界</a></li>\n</ul>"}